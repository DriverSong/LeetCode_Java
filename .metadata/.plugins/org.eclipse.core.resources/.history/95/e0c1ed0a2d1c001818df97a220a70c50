package leetcode;

import java.util.Arrays;

public class SellStock {
	public int maxProfit(int[] prices) {
        if (prices.length < 2) 
        	return 0;
        int left = 0;
        int right = prices.length;
        return myMaxProfit(prices, left, right);
        int leftMin = arrayMin(prices, left ,mid);
        int rightMax = arrayMax(prices, mid ,right);
        int crossProfit = rightMax - leftMin > 0 ? rightMax - leftMin : 0;
        int partProfit = myMaxProfit(prices, left, mid) > myMaxProfit(prices, mid, right) ? myMaxProfit(prices, left, mid) : myMaxProfit(prices, mid, right);
        return crossProfit > partProfit ? crossProfit : partProfit;
    }

	private int myMaxProfit(int[] prices, int left, int mid) {
		if (condition) 
	}

	private int arrayMax(int[] prices, int left, int right) {
		Arrays.sort(prices, left, right);
		return prices[prices.length - 1];
	}

	private int arrayMin(int[] prices, int left, int right ) {
		Arrays.sort(prices, left, right);
		return prices[0];
	}
}
