package leetcode;

public class SymmetricTree {
	 public class TreeNode {
	     int val;
	     TreeNode left;
	     TreeNode right;
	     TreeNode(int x) { val = x; }
	 }
    public boolean isSymmetric(TreeNode root) {
    	if ( root == null) 
			return true;
    	if (root.left == null && root.right == null)  return true;
    	if (root.left != null && root.right == null)  return false;
    	if (root.left == null && root.right != null)  return false;
        return isReverse(root.left, root.right);
    }
	private Boolean isReverse(TreeNode root1, TreeNode root2) {
		if (root1.val != root2.val) {
			return false;
		}
		if (root1.val == root2.val ) {
			if ((root1.left == null && root2.right != null) || (root1.left != null && root2.right == null) || (root1.right == null && root2.left != null) || (root1.right != null && root2.left == null)) {
				return false;
			}
			else if (root1.left == null && root1.right == null && root2.left == null && root2.right == null) {
				return true;
			}else {
				return isReverse(root1.left, root2.right) && isReverse(root1.right, root2.left);
			}
		}
		return true;
	}
}
