package leetcode;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class GenerateParentheses {
	public List<String> generateParenthesis(int n) {
		Stack< Character> stack = new Stack<>();
		int count = n;
		List<String> out = new ArrayList<>();
		List<Character> temp = new ArrayList<>();
		backTrack(out, stack, count - 1, '(', temp);
		return out;
	}

	private void backTrack(List<String> out, Stack<Character> stack, int count, char input, List<Character> temp) {
		if (input == '(') stack.push(input);
		else {
			if(!stack.isEmpty() && stack.peek() == '(') {
				stack.pop();
				if (count == 0 && stack.isEmpty()) {
					out.add(stack.toString());
					return;
				}
			}
			else return;
		}
		if (count > 0) {
			backTrack(out, stack, count - 1, '(', temp);
		}
		backTrack(out, stack, count - 1, ')', temp);
	}
	public static void main(String arg[]) {
		GenerateParentheses generateParentheses = new GenerateParentheses();
		System.out.println(generateParentheses.generateParenthesis(3));
	}
}
