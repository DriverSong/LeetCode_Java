package leetcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CombinationSum {
	public List<List<Integer>> combinationSum(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> out = new ArrayList<>();
		backTrack(out, candidates, new ArrayList<>(), 0, target);
		System.out.println(out[1]);
		return out;
    }
	private void backTrack(List<List<Integer>> out, int[] candidates, List<Integer> tempList, int num, int target) {
		if (target < 0) return;
		if (target == 0) {
			out.add(tempList);
		}else {
			for(int i = num; i < candidates.length; i++) {
				target = target - candidates[i];
				tempList.add(candidates[i]);
				backTrack(out, candidates, tempList, i, target);
				tempList.remove(tempList.size() - 1);
			}
		}
	}
	public static void main(String arg[]) {
		CombinationSum newClass = new CombinationSum();
		int[] candidates = {1,2,3,4,5,6};
		int target = 7;
		newClass.combinationSum(candidates, target);
	}
}
